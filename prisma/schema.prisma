generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  generations Generation[]
  unlimited   Boolean      @default(false)

  tutors   Tutor[]
  messages Message[]

  LanguageTranslators        LanguageTranslator[]
  LanguageTranslatorMessages LanguageTranslatorMessage[]
  stripeCustomerId           String?                     @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId       String?                     @unique @map(name: "stripe_subscription_id")
  stripePriceId              String?                     @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd     DateTime?                   @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model Tutor {
  id          String  @id @default(cuid())
  name        String
  description String?

  uploadStatus UploadStatus @default(PENDING)

  url      String
  key      String
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Tutor     Tutor?   @relation(fields: [tutorId], references: [id])
  tutorId   String?
}

model Generation {
  id     String   @id @default(cuid())
  type   String
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model LanguageTranslator {
  id        String                      @id @default(cuid())
  language  String
  userId    String
  createdAt DateTime                    @default(now())
  user      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  LanguageTranslatorMessage[]
}

model LanguageTranslatorMessage {
  id              String             @id @default(cuid())
  role            String
  content         String
  codeGenerator   LanguageTranslator @relation(fields: [codeGeneratorId], references: [id])
  codeGeneratorId String
  userId          String
  user            User               @relation(fields: [userId], references: [id])
  createdAt       DateTime           @default(now())
}
